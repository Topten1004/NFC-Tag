@{
    string roomId = ViewBag.RoomId as string;
    string token = Context.Request.Cookies["Demo-ClinoTag-Access-Token"];
    bool isLoggedIn = !string.IsNullOrEmpty(token);
}

<div class="container mt-4">
    <div class="row">
        @if (isLoggedIn)
        {
            <div class="col-md-4">
                <div id="roomListContainer">
                    <label for="roomList" class="form-label">Room List</label>
                    <ul class="list-group" id="roomList">
                    </ul>
                </div>
            </div>
        }
        <div class="col-md-8">
            @if (isLoggedIn)
            {
                <div class="mb-3" style="display:none">
                    <label for="customerName" class="form-label">Customer Name</label>
                    <input type="text" class="form-control" id="customerName" value="Manager">
                </div>
            }
            else
            {
                <div class="mb-3">
                    <label for="customerName" class="form-label">Customer Name</label>
                    <input type="text" class="form-control" id="customerName" placeholder="Enter Customer Name">
                </div>
                <div class="mb-3">
                    <label for="languageSelect" class="form-label">Select Language</label>
                    <select class="form-select" id="languageSelect">
                        <option value="English">English</option>
                        <option value="Spanish">Spanish</option>
                        <option value="French">French</option>
                    </select>
                </div>
            }

            <div class="mb-3">
                <div id="chatContainer" class="chat-container border rounded p-3" style="height: 420px; overflow-y: scroll;">
                </div>
            </div>
            <div class="row">
                <div class="col-9">
                    <textarea class="form-control" id="chatMessage" rows="3" placeholder="Type your message..."></textarea>
                </div>
                <div class="col-3 d-flex align-items-end">
                    <button class="btn btn-primary w-100" id="sendMessageButton">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .list-group-item.active {
        background-color: #007bff; /* Blue color or any color you prefer */
        color: white; /* Ensure text color contrasts with the background */
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
    let currentRoomId = null;
    let managerRoomId = "Managers";
    let isManager = false;

    connection.start().then(function () {
        console.log("Connected with ID:", connection.connectionId);

        // Automatically join the room if roomId is provided
        const roomId = '@ViewBag.RoomId';

        if (roomId) {
            currentRoomId = roomId;
            connection.invoke("JoinRoom", roomId).catch(function (err) {
                console.error("Error joining room:", err.toString());
            });
        }

        // Fetch and display the room list
        connection.invoke("GetRoomList").catch(function (err) {
            console.error("Error fetching room list:", err.toString());
        });

    }).catch(function (err) {
        console.error("SignalR connection failed:", err.toString());
    });

    // Handle receiving room list from the server
    connection.on("ReceiveRoomList", function (rooms) {
        console.log("Received rooms:", rooms);
        $('#roomListContainer').show(); // Show the room list container
        $('#roomList').empty(); // Clear previous list if any

        rooms.forEach(room => {

            if (room !== "Managers")
                addRoomToList(room);

        });
    });

    // Handle room list updates
    connection.on("ReceiveNewRoom", function (roomId) {
        console.log("ReceiveNewRoom:", roomId);

        if (roomId !== "Managers")
            addRoomToList(roomId);
    });

    // Add room to the list in the UI
    function addRoomToList(roomId) {

        const roomList = $('#roomList');
        const newItem = $('<li>').addClass('list-group-item').text(roomId);

        // Highlight the selected room if it matches the currentRoomId
        if (roomId === currentRoomId) {
            newItem.addClass('active'); // Assuming 'active' is the highlight class
        }

        newItem.on('click', function () {
            currentRoomId = roomId;
            $('#roomList li').removeClass('active'); // Remove highlight from all items
            newItem.addClass('active'); // Highlight the selected item

            connection.invoke("JoinRoom", roomId).catch(function (err) {
                console.error("Error joining room:", err.toString());
            });

            fetchRoomMessages(roomId); // Fetch the chat history
        });

        roomList.append(newItem);
    }

    // Handle sending messages
    $('#sendMessageButton').on('click', function () {
        let message = $('#chatMessage').val();
        const language = $('#languageSelect').val();
        const roomId = currentRoomId;
        let name = $('#customerName').val();

        if (!name) {
            alert("Please enter the customer name.");
            return;
        }

        if (!message) {
            alert("Please enter the message.");
            return;
        }

        // Format the message with customer name
        message = name + ": " + message;

        console.log("send message:", message);
        console.log("language:", language);

        if (message && roomId) {
            connection.invoke("SendMessageToRoom", roomId, message, language).catch(function (err) {
                console.error("Error sending message:", err.toString());
            });
            $('#chatMessage').val(''); // Clear the input
        }
    });


    // Fetch chat history for a room
    function fetchRoomMessages(roomId) {
        connection.invoke("GetRoomMessages", roomId).catch(function (err) {
            console.error("Error fetching room messages:", err.toString());
        });
    }

    // Handle receiving messages from the server
    connection.on("ReceiveMessage", function (data) {
        const roomId = data.roomId;
        const text = data.text;
        const chatContainer = $('#chatContainer');

        if (roomId === currentRoomId) {
            const newMessage = $('<div>').addClass('chat-message').text(text);
            chatContainer.append(newMessage);
        }
    });

    // Handle receiving room chat history
    connection.on("ReceiveRoomMessages", function (data) {
        const roomId = data.roomId;
        const messages = data.messages;
        const chatContainer = $('#chatContainer');

        if (roomId === currentRoomId) {
            chatContainer.empty(); // Clear current chat messages

            messages.forEach(message => {
                const newMessage = $('<div>').addClass('chat-message').text(message);
                chatContainer.append(newMessage);
            });
        }
    });
</script>
